import { BuscaBinaria } from './BuscaBinaria';

console.log('=== EXERC√çCIO 22 - BUSCA BIN√ÅRIA AVAN√áADA ===\n');

console.log('üìç Teste 1: Busca bin√°ria b√°sica');
const busca1 = new BuscaBinaria([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]);
console.log(`Lista: ${busca1.toString()}`);
console.log(`Est√° ordenada: ${busca1.isOrdenado()}`);

const testes = [7, 10, 1, 19, 20];
testes.forEach(valor => {
    const indice = busca1.buscar(valor);
    console.log(`Buscar ${valor}: √≠ndice ${indice} (${busca1.obterComparacoes()} compara√ß√µes)`);
});

console.log('\nüìç Teste 2: Primeira e √∫ltima ocorr√™ncia');
const busca2 = new BuscaBinaria([1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 6]);
console.log(`Lista com duplicatas: ${busca2.toString()}`);

const valorDuplicado = 5;
const primeiro = busca2.buscarPrimeiro(valorDuplicado);
const ultimo = busca2.buscarUltimo(valorDuplicado);
console.log(`Valor ${valorDuplicado}: primeira ocorr√™ncia=${primeiro}, √∫ltima=${ultimo}`);
console.log(`Todas as ocorr√™ncias nos √≠ndices: ${Array.from({length: ultimo - primeiro + 1}, (_, i) => primeiro + i)}`);

console.log('\nüìç Teste 3: Busca por faixa');
const busca3 = new BuscaBinaria([10, 15, 20, 25, 30, 35, 40, 45, 50]);
console.log(`Lista: ${busca3.toString()}`);

const faixas = [
    [20, 40],
    [12, 18],
    [45, 60],
    [5, 15]
];

faixas.forEach(([min, max]) => {
    const indices = busca3.buscarFaixa(min, max);
    const valores = indices.map(i => busca3.getElementos()[i]);
    console.log(`Faixa [${min}, ${max}]: √≠ndices [${indices.join(',')}] = valores [${valores.join(',')}]`);
});

console.log('\nüìç Teste 4: Elemento mais pr√≥ximo');
const busca4 = new BuscaBinaria([10, 20, 30, 40, 50]);
console.log(`Lista: ${busca4.toString()}`);

const valoresTeste = [15, 25, 35, 5, 55, 30];
valoresTeste.forEach(valor => {
    const proximo = busca4.buscarMaisProximo(valor);
    console.log(`Mais pr√≥ximo de ${valor}: √≠ndice ${proximo.indice}, valor ${proximo.valor}, dist√¢ncia ${proximo.distancia}`);
});

console.log('\nüìç Teste 5: Posi√ß√£o de inser√ß√£o');
const busca5 = new BuscaBinaria([10, 30, 50, 70, 90]);
console.log(`Lista: ${busca5.toString()}`);

const valoresInserir = [5, 25, 45, 65, 95, 30];
valoresInserir.forEach(valor => {
    const posicao = busca5.buscarPosicaoInsercao(valor);
    console.log(`Inserir ${valor} na posi√ß√£o ${posicao}`);
});

console.log('\nüìç Teste 6: Inser√ß√£o ordenada');
const busca6 = new BuscaBinaria([10, 30, 50, 70, 90]);
console.log(`Lista inicial: ${busca6.toString()}`);

const novosValores = [25, 45, 5, 95, 30];
novosValores.forEach(valor => {
    const posicao = busca6.inserirOrdenado(valor);
    console.log(`Inserido ${valor} na posi√ß√£o ${posicao}: ${busca6.toString()}`);
});

console.log('\nüìç Teste 7: Lista n√£o ordenada');
const busca7 = new BuscaBinaria([5, 2, 8, 1, 9]);
console.log(`Lista n√£o ordenada: ${busca7.toString()}`);
console.log(`Est√° ordenada: ${busca7.isOrdenado()}`);

try {
    busca7.buscar(5);
} catch (error) {
    console.log(`Erro esperado: ${(error as Error).message}`);
}

console.log('For√ßando ordena√ß√£o...');
busca7.ordenar();
console.log(`Lista ap√≥s ordena√ß√£o: ${busca7.toString()}`);
console.log(`Agora est√° ordenada: ${busca7.isOrdenado()}`);

const resultado = busca7.buscar(5);
console.log(`Buscar 5: √≠ndice ${resultado}`);

console.log('\nüìç Teste 8: Casos extremos');

// Lista vazia
try {
    const buscaVazia = new BuscaBinaria([]);
    buscaVazia.buscarMaisProximo(5);
} catch (error) {
    console.log(`Lista vazia - erro esperado: ${(error as Error).message}`);
}

// Lista com um elemento
const buscaUm = new BuscaBinaria([42]);
console.log(`Lista [42]: buscar 42 = √≠ndice ${buscaUm.buscar(42)}`);
console.log(`Lista [42]: buscar 40 = √≠ndice ${buscaUm.buscar(40)}`);

const proximoUm = buscaUm.buscarMaisProximo(40);
console.log(`Mais pr√≥ximo de 40: valor ${proximoUm.valor}, dist√¢ncia ${proximoUm.distancia}`);

console.log('\nüìç Teste 9: An√°lise de desempenho');
const tamanhos = [100, 1000, 10000];

tamanhos.forEach(n => {
    // Gera lista ordenada
    const listaGrande = Array.from({length: n}, (_, i) => i * 2);
    const buscaGrande = new BuscaBinaria(listaGrande);
    
    // Busca elemento no meio
    const valorMedio = Math.floor(n);
    const inicio = Date.now();
    const resultado = buscaGrande.buscar(valorMedio);
    const fim = Date.now();
    
    console.log(`Lista de ${n} elementos:`);
    console.log(`  Buscar ${valorMedio}: √≠ndice ${resultado}`);
    console.log(`  Compara√ß√µes: ${buscaGrande.obterComparacoes()}`);
    console.log(`  Tempo: ${fim - inicio}ms`);
    console.log(`  Compara√ß√µes te√≥ricas m√°ximas: ${Math.ceil(Math.log2(n))}`);
});