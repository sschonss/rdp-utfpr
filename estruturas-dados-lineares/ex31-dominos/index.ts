import { JogoDominos } from './JogoDominos';

console.log('=== EXERC√çCIO 31 - JOGO DE DOMIN√ìS ===\n');

const jogo = new JogoDominos();

// Gerar conjunto padr√£o de domin√≥s
const conjuntoPadrao = JogoDominos.gerarConjuntoPadrao();
console.log(`üé≤ Conjunto padr√£o gerado: ${conjuntoPadrao.length} pe√ßas`);
console.log('Primeiras 10 pe√ßas:', conjuntoPadrao.slice(0, 10).map(p => `[${p.lado1}|${p.lado2}]`).join(' '));
console.log();

// === VARIA√á√ÉO 1: ENCAIXE SIMPLES ===
console.log('üîµ VARIA√á√ÉO 1: Encaixe Simples');
jogo.reiniciar();

const pecasTeste1 = [
    {lado1: 3, lado2: 4},
    {lado1: 4, lado2: 6},
    {lado1: 2, lado2: 3},
    {lado1: 6, lado2: 1},
    {lado1: 5, lado2: 2}
];

console.log('Pe√ßas de teste:', pecasTeste1.map(p => `[${p.lado1}|${p.lado2}]`).join(', '));

pecasTeste1.forEach((peca, i) => {
    const resultado = jogo.encaixeSimples(peca);
    console.log(`${i + 1}. ${resultado.mensagem}`);
});

console.log(`Tabuleiro final: ${jogo.getTabuleiro()}`);
const extremidades1 = jogo.getExtremidades();
console.log(`Extremidades: ${extremidades1?.esquerda} e ${extremidades1?.direita}`);
console.log();

// === VARIA√á√ÉO 2: ENCAIXE ESTRAT√âGICO ===
console.log('üü° VARIA√á√ÉO 2: Encaixe Estrat√©gico');
jogo.reiniciar();

const pecasTeste2 = [
    {lado1: 2, lado2: 3},
    {lado1: 3, lado2: 5},
    {lado1: 5, lado2: 6},
    {lado1: 2, lado2: 4},
    {lado1: 6, lado2: 1}
];

const pecasRestantes = [...pecasTeste2];

console.log('Testando estrat√©gia inteligente:');
pecasTeste2.forEach((peca, i) => {
    pecasRestantes.shift(); // Remove a pe√ßa atual das restantes
    const resultado = jogo.encaixeEstrategico(peca, pecasRestantes);
    console.log(`${i + 1}. ${resultado.mensagem}`);
});

console.log(`Tabuleiro estrat√©gico: ${jogo.getTabuleiro()}`);
console.log();

// === VARIA√á√ÉO 3: ENCAIXE EM CADEIA ===
console.log('üü¢ VARIA√á√ÉO 3: Encaixe em Cadeia');
jogo.reiniciar();

const pecasCadeia = [
    {lado1: 1, lado2: 2},
    {lado1: 3, lado2: 4},
    {lado1: 2, lado2: 3},
    {lado1: 4, lado2: 5},
    {lado1: 5, lado2: 6},
    {lado1: 0, lado2: 1}
];

console.log('Pe√ßas para cadeia:', pecasCadeia.map(p => `[${p.lado1}|${p.lado2}]`).join(', '));

const resultadosCadeia = jogo.encaixeCadeia(pecasCadeia);
console.log('\nSequ√™ncia de encaixes:');
resultadosCadeia.forEach((item, i) => {
    const status = item.resultado.sucesso ? '‚úÖ' : '‚ùå';
    console.log(`${i + 1}. ${status} [${item.peca.lado1}|${item.peca.lado2}]: ${item.resultado.mensagem}`);
});

console.log(`\nTabuleiro da cadeia: ${jogo.getTabuleiro()}`);
console.log();

// === VARIA√á√ÉO 4: ENCAIXE COM BLOQUEIO ===
console.log('üî¥ VARIA√á√ÉO 4: Encaixe com Bloqueio');
jogo.reiniciar();

const pecasBloqueio = [
    {lado1: 0, lado2: 1}, // Primeira pe√ßa
    {lado1: 0, lado2: 6}, // Pode causar bloqueio (0 √© raro)
    {lado1: 1, lado2: 2}, // Alternativa segura
    {lado1: 6, lado2: 6}  // Dupla alta
];

console.log('Testando preven√ß√£o de bloqueios:');

// Primeiro encaixe
let resultado = jogo.encaixeComBloqueio(pecasBloqueio[0]);
console.log(`1. ${resultado.mensagem}`);

// Segundo encaixe - com an√°lise de bloqueio
resultado = jogo.encaixeComBloqueio(pecasBloqueio[1], true);
console.log(`2. ${resultado.mensagem}`);

// Terceiro encaixe - sem an√°lise de bloqueio
resultado = jogo.encaixeComBloqueio(pecasBloqueio[2], false);
console.log(`3. ${resultado.mensagem}`);

console.log(`Tabuleiro com bloqueios: ${jogo.getTabuleiro()}`);
console.log();

// === VARIA√á√ÉO 5: ENCAIXE COM PONTUA√á√ÉO ===
console.log('üü£ VARIA√á√ÉO 5: Encaixe com Pontua√ß√£o');
jogo.reiniciar();

const pecasPontuacao = [
    {lado1: 6, lado2: 6}, // Dupla alta - especial
    {lado1: 5, lado2: 6}, // Soma alta
    {lado1: 6, lado2: 4}, // Continua com 6
    {lado1: 3, lado2: 3}, // Dupla m√©dia
    {lado1: 0, lado2: 3}  // Pe√ßa normal
];

console.log('Sistema de pontua√ß√£o ativo:');
pecasPontuacao.forEach((peca, i) => {
    const resultado = jogo.encaixeComPontuacao(peca);
    console.log(`${i + 1}. ${resultado.mensagem}`);
});

console.log(`\nPontua√ß√£o final: ${jogo.getPontuacao()} pontos`);
console.log(`Tabuleiro final: ${jogo.getTabuleiro()}`);
console.log();

// === DEMONSTRA√á√ÉO AVAN√áADA ===
console.log('üöÄ DEMONSTRA√á√ÉO AVAN√áADA: Jogo Completo Simulado');

// Embaralhar e distribuir pe√ßas
const todasPecas = JogoDominos.embaralhar(conjuntoPadrao);
const mao1 = todasPecas.slice(0, 7);
const mao2 = todasPecas.slice(7, 14);

console.log('\nM√£o do Jogador 1:', mao1.map(p => `[${p.lado1}|${p.lado2}]`).join(' '));
console.log('M√£o do Jogador 2:', mao2.map(p => `[${p.lado1}|${p.lado2}]`).join(' '));

// Simular algumas jogadas alternadas
jogo.reiniciar();
const jogadas = [mao1[0], mao2[0], mao1[1], mao2[1], mao1[2]];

console.log('\nSimula√ß√£o de jogo:');
jogadas.forEach((peca, i) => {
    const jogador = i % 2 === 0 ? 'J1' : 'J2';
    const resultado = jogo.encaixeComPontuacao(peca);
    console.log(`${jogador}: ${resultado.mensagem}`);
});

console.log(`\nTabuleiro da simula√ß√£o: ${jogo.getTabuleiro()}`);
console.log(`Extremidades dispon√≠veis: ${JSON.stringify(jogo.getExtremidades())}`);

// === AN√ÅLISE DE PADR√ïES ===
console.log('\nüìä AN√ÅLISE DE PADR√ïES');

// Contar tipos de pe√ßas no conjunto padr√£o
const analise = {
    duplas: conjuntoPadrao.filter(p => p.lado1 === p.lado2).length,
    altas: conjuntoPadrao.filter(p => p.lado1 + p.lado2 >= 10).length,
    comZero: conjuntoPadrao.filter(p => p.lado1 === 0 || p.lado2 === 0).length,
    comSeis: conjuntoPadrao.filter(p => p.lado1 === 6 || p.lado2 === 6).length
};

console.log('An√°lise do conjunto padr√£o:');
console.log(`  Pe√ßas duplas: ${analise.duplas}`);
console.log(`  Pe√ßas altas (‚â•10): ${analise.altas}`);
console.log(`  Pe√ßas com zero: ${analise.comZero}`);
console.log(`  Pe√ßas com seis: ${analise.comSeis}`);

// Hist√≥rico de a√ß√µes
const historico = jogo.getHistorico();
console.log(`\nTotal de a√ß√µes registradas: ${historico.length}`);

// Estat√≠sticas de sucesso por varia√ß√£o
const sucessosPorTipo = historico.reduce((acc, acao) => {
    const tipo = acao.acao.split('-')[1] || 'simples';
    if (!acc[tipo]) acc[tipo] = {sucessos: 0, total: 0};
    acc[tipo].total++;
    if (acao.resultado.sucesso) acc[tipo].sucessos++;
    return acc;
}, {} as {[key: string]: {sucessos: number, total: number}});

console.log('\nTaxa de sucesso por varia√ß√£o:');
Object.entries(sucessosPorTipo).forEach(([tipo, stats]) => {
    const taxa = ((stats.sucessos / stats.total) * 100).toFixed(1);
    console.log(`  ${tipo}: ${stats.sucessos}/${stats.total} (${taxa}%)`);
});

// === TESTE DE CASOS EXTREMOS ===
console.log('\n‚ö° CASOS EXTREMOS');

// Pe√ßa que n√£o encaixa
jogo.reiniciar();
jogo.encaixeSimples({lado1: 1, lado2: 2});
const pecaNaoEncaixa = jogo.encaixeSimples({lado1: 5, lado2: 6});
console.log(`Pe√ßa que n√£o encaixa: ${pecaNaoEncaixa.mensagem}`);

// Tabuleiro com uma pe√ßa s√≥
jogo.reiniciar();
jogo.encaixeSimples({lado1: 0, lado2: 0});
console.log(`Dupla zero: ${jogo.getTabuleiro()}`);

// Encaixe m√°ximo poss√≠vel
jogo.reiniciar();
const pecaMaxima = {lado1: 6, lado2: 6};
const resultadoMaximo = jogo.encaixeComPontuacao(pecaMaxima);
console.log(`Pontua√ß√£o m√°xima: ${resultadoMaximo.mensagem}`);

console.log('\n‚úÖ Exerc√≠cio 31 conclu√≠do - Jogo de Domin√≥s com 5 varia√ß√µes implementado!');