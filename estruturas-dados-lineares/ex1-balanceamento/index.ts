import { Balanceamento } from './Balanceamento';

console.log('=== EXERC√çCIO 1 - BALANCEAMENTO ===\n');

// Casos de teste com express√µes v√°lidas
const express√µesV√°lidas = [
    '(a + b)',
    '{a * [c ‚Äì b * (e + f)]} ‚Äì 2',
    '{[()]}',
    '((()))',
    '[[[a]]]',
    '{a + [b * (c + d)]}',
    ''
];

// Casos de teste com express√µes inv√°lidas
const express√µesInv√°lidas = [
    '(a + b',
    'a + b)',
    '{a * [(c ‚Äì b * (e + f)]} ‚Äì 2',
    '([)]',
    '{[}]',
    '(a + [b)]',
    '{(a + b)}',  // chaves dentro de par√™nteses
    '[a + (b + {c})]'  // chaves dentro de par√™nteses via colchetes
];

console.log('üìç Testando express√µes V√ÅLIDAS:');
express√µesV√°lidas.forEach((expr, index) => {
    const balanceamento = new Balanceamento(expr);
    const resultado = balanceamento.estaBalanceada();
    console.log(`${index + 1}. "${expr}" -> ${resultado ? '‚úÖ BALANCEADA' : '‚ùå N√ÉO BALANCEADA'}`);
});

console.log('\nüìç Testando express√µes INV√ÅLIDAS:');
express√µesInv√°lidas.forEach((expr, index) => {
    const balanceamento = new Balanceamento(expr);
    const resultado = balanceamento.estaBalanceada();
    console.log(`${index + 1}. "${expr}" -> ${resultado ? '‚úÖ BALANCEADA' : '‚ùå N√ÉO BALANCEADA'}`);
});

console.log('\nüìç Teste espec√≠fico com hierarquia:');
const testesHierarquia = [
    '{a + [b + (c + d)]}',  // Correto: chaves > colchetes > par√™nteses
    '(a + [b + c])',        // Incorreto: colchetes dentro de par√™nteses
    '(a + {b + c})',        // Incorreto: chaves dentro de par√™nteses
];

testesHierarquia.forEach((expr, index) => {
    const balanceamento = new Balanceamento(expr);
    const resultado = balanceamento.estaBalanceada();
    console.log(`${index + 1}. "${expr}" -> ${resultado ? '‚úÖ BALANCEADA' : '‚ùå N√ÉO BALANCEADA'}`);
});